/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        // level order traversal means queue
        // add root to the queue
        // keep iterating until queue is not empty
        // loop for the queue size
        // keep adding data at the that level in the list
        
        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> level = new ArrayList<>();
            for(int i =0 ; i< size;i++){
                TreeNode element = q.remove();
                level.add(element.val);
                if(element.left != null){
                    q.add(element.left);
                }
                if(element.right != null){
                    q.add(element.right);
                }
            }
            result.add(level);
        }
      return result;  
    }
}
