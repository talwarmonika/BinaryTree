/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        
        // check if root is preset
        // write a code to check left and right subtree
        // check the base conditions 
        // check the left tree left with right tree right
        //check the left tree right with right tree left
        
        if(root == null){
            return true;
        }
        return  isSymmetric(root.left, root.right);
        
    }
    
    public boolean isSymmetric(TreeNode n1, TreeNode n2){
        if(n1== null && n2 == null){
            return true;
        }else if(n1==null || n2 == null){
            return false;
        }else if(n1.val != n2.val){
            return false;
        }else {
            return (isSymmetric(n1.left, n2.right) && isSymmetric(n1.right, n2.left));
        }
        
    }
}
